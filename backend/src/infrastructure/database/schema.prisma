generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------

enum Role {
  ADMIN
  MANAGER
  SUPERVISOR
  CUSTOMER
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  LOAN_ISSUE
  LOAN_REPAYMENT
  INTEREST
  FINE
  OTHER
  CAPITAL_INFUSION
  CASH_TO_BANK
  BANK_TO_CASH
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  REVERSED
}

enum InterestType {
  FLAT
  REDUCING
  FIXED
  VARIABLE
  HYBRID
  ONE_TIME
  MORTGAGE
}

enum TermPeriod {
  DAYS
  MONTHS
  YEARS
}

enum FeeType {
  FLAT
  PERCENTAGE
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  DEFAULTED
  CLOSED
}

enum RepaymentStatus {
  PENDING
  PAID
  LATE
  PARTIALLY_PAID
}

enum ReportType {
  LEDGER
  ANNUAL
  QUARTERLY
  MONTHLY
  ACCOUNT_HISTORY
  TRANSACTION_HISTORY
  LOAN_SUMMARY
  CUSTOM
  COLLECTION
}

enum AccountStatus {
  PENDING
  ACTIVE
  CLOSED
  SUSPENDED
}

enum PaymentMode {
  CASH
  BANK
  CHEQUE
  ONLINE
  FD
  INVESTMENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AccountType {
  SAVINGS
  CURRENT
}

// ---------- MODELS ----------

model User {
  id         String    @id @default(cuid())
  firstName  String
  lastName   String
  email      String    @unique
  phone      String?
  password   String
  isActive   Boolean   @default(false)
  isVerified Boolean   @default(false)
  role       Role      @default(CUSTOMER)
  lastLogin  DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  updatedById String?

  otps            Otp[]
  accounts        Account[]     @relation("UserAccounts")
  transactions    Transaction[] @relation("UserTransactions")
  loans           Loan[]
  createdAccounts Account[]     @relation("AccountCreatedBy")
  updatedAccounts Account[]     @relation("AccountUpdatedBy")

  @@index([email])
  @@index([phone])
}

model Otp {
  id          String    @id @default(uuid())
  email       String?
  phone       String?
  otp         String
  expiresAt   DateTime
  userId      String
  resendCount Int       @default(0)
  lastSentAt  DateTime
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, otp])
  @@index([userId, otp])
}

model Account {
  id                String        @id @default(uuid())
  accountNumber     String        @unique
  firstName         String
  lastName          String
  fatherSpouse      String
  occupation        String
  companyInstitute  String?
  email             String?
  phone             String?
  gender            Gender
  dob               DateTime      @db.Date
  photo             String?
  panCard           String?
  aadhaarCard       String?
  type              AccountType
  isMinor           Boolean       @default(false)
  linkedAccountId   String?
  accountOpeningFee Decimal
  balance           Decimal       @default(0)
  status            AccountStatus @default(PENDING)
  openedAt          DateTime      @default(now())
  closedAt          DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdById       String?
  updatedById       String?
  userId            String
  groupId           String?

  user      User          @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)
  group     AccountGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  createdBy User?         @relation("AccountCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?         @relation("AccountUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  addresses     Address[]
  nominees      Nominee[]
  transactions  Transaction[]
  loans         Loan[]
  ledgerEntries LedgerEntry[]

  @@index([accountNumber])
  @@index([userId])
  @@index([groupId])
  @@index([status])
  @@index([email])
  @@index([phone])
}

model AccountGroup {
  id          String    @id @default(uuid())
  name        String
  description String?
  accounts    Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           String   @id @default(uuid())
  type         String
  addressLine1 String
  addressLine2 String?
  landmark     String?
  city         String
  state        String
  country      String
  pinCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  accountId    String?
  account      Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  nominees Nominee[]
}

model Nominee {
  id          String  @id @default(uuid())
  firstName   String
  lastName    String
  relation    String
  email       String?
  phoneNumber String?
  accountId   String
  addressId   String?

  account Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  address Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model Loan {
  id        String  @id @default(uuid())
  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  loanType     String
  amount       Decimal    @db.Decimal(12, 2)
  interestRate Decimal    @db.Decimal(5, 2)
  tenureMonths Int
  emiAmount    Decimal    @db.Decimal(12, 2)
  status       LoanStatus @default(PENDING)

  appliedAt  DateTime  @default(now())
  approvedAt DateTime?
  closedAt   DateTime?

  payments      LoanPayment[]
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])
  repayments    Repayment[]
  loanPolicyId  String?
  loanPolicy    LoanPolicy?   @relation(fields: [loanPolicyId], references: [id])
  ledgerEntries LedgerEntry[]
}

model LoanPayment {
  id     String @id @default(uuid())
  loanId String
  loan   Loan   @relation(fields: [loanId], references: [id])

  amount        Decimal     @db.Decimal(12, 2)
  paymentDate   DateTime    @default(now())
  mode          PaymentMode
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  status RepaymentStatus @default(PAID)

  @@index([loanId])
}

model Transaction {
  id        String  @id @default(uuid())
  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  type         TransactionType
  amount       Decimal         @db.Decimal(12, 2)
  balanceAfter Decimal         @db.Decimal(12, 2)

  description String?
  createdAt   DateTime @default(now())

  userId String?
  user   User?   @relation("UserTransactions", fields: [userId], references: [id])

  loanPayment LoanPayment[]

  @@index([accountId])
  @@index([type])
  @@index([createdAt])
  @@index([userId])
}

model Repayment {
  id       String          @id @default(uuid())
  dueDate  DateTime
  paidDate DateTime?
  amount   Decimal
  status   RepaymentStatus
  loanId   String
  loan     Loan            @relation(fields: [loanId], references: [id])

  @@index([loanId])
  @@index([dueDate])
}

model LoanPolicy {
  id                       String       @id @default(uuid())
  name                     String
  description              String?
  minAmount                Decimal
  maxAmount                Decimal
  interestType             InterestType
  interestRate             Float
  termPeriod               TermPeriod
  maxTerm                  Int
  applicationFeeType       FeeType
  applicationFee           Decimal
  processingFeeType        FeeType
  processingFee            Decimal
  latePaymentPenaltiesType FeeType
  latePaymentPenalties     Decimal
  rules                    String[]
  isActive                 Boolean      @default(true)
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt

  loans Loan[]
}

enum TransactionCategory {
  ACCOUNT_DEPOSIT
  ACCOUNT_WITHDRAWAL
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  INTEREST_INCOME
  FEE
  FUND_ALLOCATION
  PROFIT_DISTRIBUTION
  ADJUSTMENT
}

model LedgerEntry {
  id            String              @id @default(uuid())
  category      TransactionCategory
  description   String?
  amount        Decimal             @db.Decimal(12, 2)
  debitAccount  String?
  creditAccount String?
  balanceAfter  Decimal?            @db.Decimal(12, 2)

  accountId String?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: SetNull)

  loanId String?
  loan   Loan?   @relation(fields: [loanId], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())
  createdById String?

  @@index([accountId])
  @@index([loanId])
  @@index([createdAt])
}
