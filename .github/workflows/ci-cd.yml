name: üöÄ CI/CD

on:
  push:
    branches: [main]
    paths:
      - "web/**"
      - "backend/**"
      - ".github/workflows/**"
      - "docker-compose.yml"
      - "deploy.sh"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment of all services"
        required: false
        default: false
        type: boolean
      environment:
        description: "Deployment environment"
        required: false
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: docker.io
  DOCKER_BUILDKIT: 1

jobs:
  analyze:
    name: üîç Security & Change Analysis
    runs-on: ubuntu-latest
    outputs:
      web_changed: ${{ steps.changes.outputs.web_changed }}
      backend_changed: ${{ steps.changes.outputs.backend_changed }}
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy security scan on Dockerfiles
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "."
          format: "table"
          exit-code: "0"
          severity: "HIGH,CRITICAL"

      - name: Detect changes
        id: changes
        run: |
          # Force deploy if requested
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "üîÑ Force deployment requested"
            echo "web_changed=true" >> $GITHUB_OUTPUT
            echo "backend_changed=true" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Detect changes
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          else
            CHANGED=$(git ls-files)
          fi

          web_changed=false
          backend_changed=false

          if echo "$CHANGED" | grep -qE '^web/'; then
            web_changed=true
            echo "üì± Web changes detected"
          fi

          if echo "$CHANGED" | grep -qE '^backend/'; then
            backend_changed=true
            echo "‚öôÔ∏è Backend changes detected"
          fi

          should_deploy=false
          if [ "$web_changed" = "true" ] || [ "$backend_changed" = "true" ] || echo "$CHANGED" | grep -qE '^(docker-compose\.yml|deploy\.sh|\.github/workflows)'; then
            should_deploy=true
            echo "üöÄ Deployment required"
          fi

          echo "web_changed=$web_changed" >> $GITHUB_OUTPUT
          echo "backend_changed=$backend_changed" >> $GITHUB_OUTPUT
          echo "should_deploy=$should_deploy" >> $GITHUB_OUTPUT

  build-web:
    name: üåê Build & Scan Web
    runs-on: ubuntu-latest
    needs: analyze
    if: needs.analyze.outputs.web_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}
          tags: |
            type=ref,event=branch,suffix=-web
            type=sha,prefix={{branch}}-web-,format=short
            type=raw,value=web-latest

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          platforms: linux/amd64
          push: true
          load: true 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=web
          cache-to: type=gha,mode=max,scope=web

      - name: Scan web image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:web-latest
          format: "table"
          exit-code: "0"
          severity: "HIGH,CRITICAL"

  build-backend:
    name: ‚öôÔ∏è Build & Scan Backend
    runs-on: ubuntu-latest
    needs: analyze
    if: needs.analyze.outputs.backend_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}
          tags: |
            type=ref,event=branch,suffix=-backend
            type=sha,prefix={{branch}}-backend-,format=short
            type=raw,value=backend-latest

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          load: true # Keep local copy for scanning
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend

      - name: Scan backend image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:backend-latest
          format: "table"
          exit-code: "0"
          severity: "HIGH,CRITICAL"

  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [analyze, build-web, build-backend]
    if: |
      always() && 
      needs.analyze.outputs.should_deploy == 'true' && 
      (needs.build-web.result == 'success' || needs.build-web.result == 'skipped') &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped')
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "docker-compose.yml,deploy.sh"
          target: ${{ secrets.DOCKER_COMPOSE_DIR }}
          overwrite: true
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          WEB_CHANGED: ${{ needs.analyze.outputs.web_changed }}
          BACKEND_CHANGED: ${{ needs.analyze.outputs.backend_changed }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          timeout: 300s
          envs: |
            DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,WEB_CHANGED,BACKEND_CHANGED
          script: |
            set -euo pipefail

            # Navigate to deployment directory
            cd ${{ secrets.DOCKER_COMPOSE_DIR }}

            # Login to Docker Hub
            echo "üîê Logging into Docker Hub..."
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

            # Update deployment files
            echo "üìã Updating deployment files..."

            # Run deployment
            echo "üöÄ Starting deployment..."
            export WEB_CHANGED="${WEB_CHANGED}"
            export BACKEND_CHANGED="${BACKEND_CHANGED}"

            # Make script executable and run
            chmod +x deploy.sh
            ./deploy.sh

            # Verify deployment
            echo "‚úÖ Verifying services..."
            docker compose ps

            # Health checks with retries
            echo "üè• Running health checks..."
            sleep 20

            # Function for health check with retries
            check_service() {
              local service=$1
              local port=$2
              local path=$3
              local max_attempts=5
              local attempt=1

              while [ $attempt -le $max_attempts ]; do
                if docker compose exec -T $service curl -f http://localhost:$port$path >/dev/null 2>&1; then
                  echo "‚úÖ $service service is healthy"
                  return 0
                fi
                echo "‚è≥ Attempt $attempt/$max_attempts: $service not ready, waiting..."
                sleep 10
                attempt=$((attempt + 1))
              done
              echo "‚ö†Ô∏è $service service health check failed after $max_attempts attempts"
              return 1
            }

            # Check services that are running
            if docker compose ps --services --filter "status=running" | grep -q "web"; then
              check_service "web" "3000" "/api/health" || true
            fi

            if docker compose ps --services --filter "status=running" | grep -q "backend"; then
              check_service "backend" "5000" "/api/health" || true
            fi
      - name: Run database migrations
        if: needs.analyze.outputs.backend_changed == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          timeout: 120s
          script: |
            set -e
            cd ${{ secrets.DOCKER_COMPOSE_DIR }}

            echo "üóÉÔ∏è Running database migrations..."

            # Wait for backend service
            sleep 15

            # Run migrations safely
            if docker compose exec -T backend npx prisma migrate deploy 2>/dev/null; then
              echo "‚úÖ Migrations completed"
              docker compose exec -T backend npx prisma generate || echo "‚ö†Ô∏è Client generation warning"
            else
              echo "‚ö†Ô∏è No migrations needed or backend not ready"
            fi
      - name: Cleanup
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            echo "üßπ Cleaning up..."
            docker system prune -f --filter "until=24h" || true
            docker logout || true

  notify:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Application: https://${{ secrets.VPS_HOST }}"
          else
            echo "‚ùå Deployment failed - check logs"
          fi
