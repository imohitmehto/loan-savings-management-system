generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  SUPERVISOR
  CUSTOMER
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  LOAN_ISSUE
  LOAN_REPAYMENT
  INTEREST
  FINE
  OTHER
  CAPITAL_INFUSION
  CASH_TO_BANK
  BANK_TO_CASH
  LOAN_DISBURSEMENT
  EMI_PAYMENT
  PREPAYMENT
  FORECLOSURE_PAYMENT
}

enum InterestType {
  FLAT
  REDUCING
  FIXED
  VARIABLE
  HYBRID
  ONE_TIME
  MORTGAGE
}

enum TermPeriod {
  DAYS
  MONTHS
  YEARS
}

enum FeeType {
  FLAT
  PERCENTAGE
}

enum AccountStatus {
  PENDING
  ACTIVE
  CLOSED
  SUSPENDED
}

enum LoanStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  DISBURSED
  ACTIVE
  COMPLETED
  DEFAULTED
  CLOSED
  FORECLOSED
}

enum RepaymentStatus {
  PENDING
  PAID
  LATE
  PARTIALLY_PAID
  OVERDUE
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  REVERSED
}

enum ReportType {
  LEDGER
  ANNUAL
  QUARTERLY
  MONTHLY
  ACCOUNT_HISTORY
  TRANSACTION_HISTORY
  LOAN_SUMMARY
  CUSTOM
  COLLECTION
}

enum PaymentMode {
  CASH
  BANK
  CHEQUE
  ONLINE
  FD
  INVESTMENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AccountType {
  SAVINGS
  CURRENT
}

enum LoanType {
  HOME_LOAN
  VEHICLE_LOAN
  PERSONAL_LOAN
  BUSINESS_LOAN
  EDUCATION_LOAN
  GOLD_LOAN
  EMERGENCY_LOAN
}

enum CalculationType {
  REDUCING_BALANCE
  FLAT_RATE
  COMPOUND_INTEREST
}

enum EMIStatus {
  PENDING
  PAID
  OVERDUE
  PARTIALLY_PAID
  WAIVED
}

enum ForeclosureStatus {
  REQUESTED
  APPROVED
  REJECTED
  PROCESSED
}

enum PrepaymentType {
  PARTIAL
  FULL
}

enum TransactionCategory {
  ACCOUNT_DEPOSIT
  ACCOUNT_WITHDRAWAL
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  INTEREST_INCOME
  FEE
  FUND_ALLOCATION
  PROFIT_DISTRIBUTION
  ADJUSTMENT
  EMI_PAYMENT
  PREPAYMENT
  FORECLOSURE
}

model User {
  id         String    @id @default(cuid())
  firstName  String
  lastName   String
  email      String    @unique
  phone      String?
  password   String
  isActive   Boolean   @default(false)
  isVerified Boolean   @default(false)
  role       Role      @default(CUSTOMER)
  lastLogin  DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  updatedById String?

  otps            Otp[]
  accounts        Account[]      @relation("UserAccounts")
  transactions    Transaction[]  @relation("UserTransactions")
  loans           Loan[]
  createdAccounts Account[]      @relation("AccountCreatedBy")
  updatedAccounts Account[]      @relation("AccountUpdatedBy")
  notifications   Notification[]

  approvedLoans         Loan[]               @relation("LoanApprovals")
  rejectedLoans         Loan[]               @relation("LoanRejections")
  processedForeclosures ForeclosureHistory[]
  processedPrepayments  PrepaymentHistory[]

  @@index([email])
  @@index([phone])
}

model Otp {
  id          String    @id @default(uuid())
  email       String    @unique
  phone       String?
  otp         String
  expiresAt   DateTime
  userId      String
  resendCount Int       @default(0)
  lastSentAt  DateTime
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, otp])
  @@index([userId, otp])
}

model Account {
  id                String        @id @default(uuid())
  accountNumber     String        @unique
  firstName         String
  lastName          String
  fatherSpouse      String
  occupation        String
  companyInstitute  String?       @db.VarChar(255)
  email             String        @unique
  phone             String?       @db.VarChar(20)
  gender            Gender
  dob               DateTime      @db.Date
  photo             String?       @db.VarChar(255)
  panCard           String?       @db.VarChar(20)
  aadhaarCard       String?       @db.VarChar(20)
  type              AccountType
  accountOpeningFee Decimal       @db.Decimal(12, 2)
  balance           Decimal       @default(0) @db.Decimal(12, 2)
  status            AccountStatus

  openedAt    DateTime  @default(now())
  closedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  updatedById String?
  groupId     String?
  userId      String

  user      User          @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)
  group     AccountGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  createdBy User?         @relation("AccountCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?         @relation("AccountUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  addresses     Address[]
  nominees      Nominee[]
  transactions  Transaction[]
  loans         Loan[]
  ledgerEntries LedgerEntry[]

  @@index([accountNumber])
  @@index([userId])
  @@index([groupId])
  @@index([email])
  @@index([phone])
}

model AccountGroup {
  id          String    @id @default(uuid())
  name        String
  description String?
  accounts    Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           String   @id @default(uuid())
  type         String
  addressLine1 String
  addressLine2 String?
  landmark     String?
  city         String
  state        String
  country      String
  pinCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String
  accountId    String?
  account      Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  nominees Nominee[]

  @@index([accountId])
}

model Nominee {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  relation    String
  email       String?  @db.VarChar(255)
  phoneNumber String?  @db.VarChar(20)
  accountId   String
  addressId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String

  account Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  address Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([addressId])
}

model Loan {
  id        String  @id @default(uuid())
  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  loanType     LoanType   @default(PERSONAL_LOAN)
  amount       Decimal    @db.Decimal(12, 2)
  interestRate Decimal    @db.Decimal(5, 2)
  tenureMonths Int
  emiAmount    Decimal    @db.Decimal(12, 2)
  status       LoanStatus @default(PENDING)

  calculationType CalculationType @default(REDUCING_BALANCE)
  principalAmount Decimal         @db.Decimal(12, 2)
  totalInterest   Decimal         @db.Decimal(12, 2)
  totalAmount     Decimal         @db.Decimal(12, 2)

  outstandingPrincipal Decimal @db.Decimal(12, 2)
  outstandingInterest  Decimal @default(0) @db.Decimal(12, 2)

  allowForeclosure    Boolean @default(true)
  foreclosureCharges  Decimal @default(2) @db.Decimal(5, 2)
  allowPrepayment     Boolean @default(true)
  prepaymentCharges   Decimal @default(1) @db.Decimal(5, 2)
  minPrepaymentAmount Decimal @default(5000) @db.Decimal(12, 2)

  appliedAt       DateTime  @default(now())
  approvedAt      DateTime?
  approvedBy      String?
  approver        User?     @relation("LoanApprovals", fields: [approvedBy], references: [id])
  rejectedAt      DateTime?
  rejectedBy      String?
  rejecter        User?     @relation("LoanRejections", fields: [rejectedBy], references: [id])
  rejectionReason String?
  disbursedAt     DateTime?
  closedAt        DateTime?

  payments      LoanPayment[]
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])
  repayments    Repayment[]
  loanPolicyId  String?
  loanPolicy    LoanPolicy?   @relation(fields: [loanPolicyId], references: [id])
  ledgerEntries LedgerEntry[]

  emiSchedule        EMISchedule[]
  foreclosureHistory ForeclosureHistory[]
  prepaymentHistory  PrepaymentHistory[]

  @@index([accountId])
  @@index([userId])
  @@index([status])
  @@index([loanType])
}

model EMISchedule {
  id                 String    @id @default(uuid())
  loanId             String
  loan               Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
  emiNumber          Int
  dueDate            DateTime
  emiAmount          Decimal   @db.Decimal(12, 2)
  principalAmount    Decimal   @db.Decimal(12, 2)
  interestAmount     Decimal   @db.Decimal(12, 2)
  outstandingBalance Decimal   @db.Decimal(12, 2)
  status             EMIStatus @default(PENDING)
  paidDate           DateTime?
  paidAmount         Decimal?  @db.Decimal(12, 2)
  penaltyAmount      Decimal?  @default(0) @db.Decimal(12, 2)
  rebateAmount       Decimal?  @default(0) @db.Decimal(12, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([loanId])
  @@index([dueDate])
  @@index([status])
}

model ForeclosureHistory {
  id                   String            @id @default(uuid())
  loanId               String
  loan                 Loan              @relation(fields: [loanId], references: [id], onDelete: Cascade)
  requestDate          DateTime          @default(now())
  foreclosureDate      DateTime?
  outstandingPrincipal Decimal           @db.Decimal(12, 2)
  outstandingInterest  Decimal           @db.Decimal(12, 2)
  foreclosureCharges   Decimal           @db.Decimal(12, 2)
  totalAmount          Decimal           @db.Decimal(12, 2)
  interestSaved        Decimal           @db.Decimal(12, 2)
  status               ForeclosureStatus @default(REQUESTED)
  processedBy          String?
  processor            User?             @relation(fields: [processedBy], references: [id])
  remarks              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([loanId])
  @@index([status])
}

model PrepaymentHistory {
  id              String         @id @default(uuid())
  loanId          String
  loan            Loan           @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount          Decimal        @db.Decimal(12, 2)
  charges         Decimal        @default(0) @db.Decimal(12, 2)
  netAmount       Decimal        @db.Decimal(12, 2)
  paymentDate     DateTime       @default(now())
  type            PrepaymentType
  interestSaved   Decimal        @db.Decimal(12, 2)
  tenureReduction Int            @default(0)
  newEMIAmount    Decimal?       @db.Decimal(12, 2)
  processedBy     String
  processor       User           @relation(fields: [processedBy], references: [id])
  remarks         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([loanId])
  @@index([paymentDate])
}

model LoanPayment {
  id            String          @id @default(uuid())
  loanId        String
  loan          Loan            @relation(fields: [loanId], references: [id])
  amount        Decimal         @db.Decimal(12, 2)
  paymentDate   DateTime        @default(now())
  mode          PaymentMode
  transactionId String
  transaction   Transaction     @relation(fields: [transactionId], references: [id])
  status        RepaymentStatus @default(PENDING)

  principalPaid Decimal? @db.Decimal(12, 2)
  interestPaid  Decimal? @db.Decimal(12, 2)
  penaltyPaid   Decimal? @default(0) @db.Decimal(12, 2)
  emiNumber     Int?
  remarks       String?

  @@index([loanId])
  @@index([transactionId])
  @@index([paymentDate])
}

model Transaction {
  id           String          @id @default(uuid())
  accountId    String
  account      Account         @relation(fields: [accountId], references: [id])
  type         TransactionType
  amount       Decimal         @db.Decimal(12, 2)
  balanceAfter Decimal         @db.Decimal(12, 2)
  description  String?
  createdAt    DateTime        @default(now())
  userId       String?
  user         User?           @relation("UserTransactions", fields: [userId], references: [id])

  loanPayments LoanPayment[]

  @@index([accountId])
  @@index([type])
  @@index([createdAt])
  @@index([userId])
}

model Repayment {
  id       String          @id @default(uuid())
  dueDate  DateTime
  paidDate DateTime?
  amount   Decimal         @db.Decimal(12, 2)
  status   RepaymentStatus
  loanId   String
  loan     Loan            @relation(fields: [loanId], references: [id])

  @@index([loanId])
  @@index([dueDate])
}

model LoanPolicy {
  id                       String       @id @default(uuid())
  name                     String
  description              String?
  loanType                 LoanType     @default(PERSONAL_LOAN)
  minAmount                Decimal      @db.Decimal(12, 2)
  maxAmount                Decimal      @db.Decimal(12, 2)
  interestType             InterestType
  interestRate             Float
  termPeriod               TermPeriod
  maxTerm                  Int
  minTerm                  Int          @default(1)
  applicationFeeType       FeeType
  applicationFee           Decimal      @db.Decimal(12, 2)
  processingFeeType        FeeType
  processingFee            Decimal      @db.Decimal(12, 2)
  latePaymentPenaltiesType FeeType
  latePaymentPenalties     Decimal      @db.Decimal(12, 2)

  allowForeclosure    Boolean @default(true)
  foreclosureCharges  Decimal @default(2) @db.Decimal(5, 2)
  allowPrepayment     Boolean @default(true)
  prepaymentCharges   Decimal @default(1) @db.Decimal(5, 2)
  minPrepaymentAmount Decimal @default(5000) @db.Decimal(12, 2)
  gracePeriodDays     Int     @default(5)

  rules     String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  loans Loan[]

  @@index([loanType])
  @@index([isActive])
}

model LedgerEntry {
  id            String              @id @default(uuid())
  category      TransactionCategory
  description   String?
  amount        Decimal             @db.Decimal(12, 2)
  debitAccount  String?
  creditAccount String?
  balanceAfter  Decimal?            @db.Decimal(12, 2)
  accountId     String?
  account       Account?            @relation(fields: [accountId], references: [id], onDelete: SetNull)
  loanId        String?
  loan          Loan?               @relation(fields: [loanId], references: [id], onDelete: SetNull)
  createdAt     DateTime            @default(now())
  createdById   String?

  transactionId String?
  emiNumber     Int?
  referenceId   String?

  @@index([accountId])
  @@index([loanId])
  @@index([createdAt])
  @@index([category])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}
